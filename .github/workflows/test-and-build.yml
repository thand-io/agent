name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.25'
  GOEXPERIMENT: 'jsonv2'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests
      run: |
        go test -v ./...

    - name: Build for validation
      run: |
        GOEXPERIMENT=jsonv2 CGO_ENABLED=0 go build -a -installsuffix cgo \
          -ldflags "-X github.com/thand-io/agent/internal/common.Version=dev -X github.com/thand-io/agent/internal/common.GitCommit=$(git rev-parse HEAD)" \
          -o agent .

  auto-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new-tag: ${{ steps.bump.outputs.new-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: latest-tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump
      run: |
        LATEST_TAG=${{ steps.latest-tag.outputs.latest-tag }}
        
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Check commit messages for version bump indicators
        if git log --format=%B -n 1 | grep -qi "BREAKING CHANGE\|major:"; then
          NEW_VERSION="v$((MAJOR + 1)).0.0"
        elif git log --format=%B -n 1 | grep -qi "feat:\|feature:\|minor:"; then
          NEW_VERSION="v$MAJOR.$((MINOR + 1)).0"
        else
          NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
        fi
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Bumping from $LATEST_TAG to $NEW_VERSION"

    - name: Create and push tag
      run: |
        NEW_VERSION=${{ steps.bump.outputs.new-version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Auto-release $NEW_VERSION"
        git push origin $NEW_VERSION

  build-multi-platform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Build for multiple platforms
      run: |
        VERSION=${{ steps.version.outputs.version }}
        COMMIT=${{ steps.version.outputs.commit }}
        
        # Create dist directory
        mkdir -p dist
        
        # Build for different platforms and create archives
        platforms=(
          "linux/amd64"
          "linux/arm64" 
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          output_name="agent"
          if [ "$os" = "windows" ]; then
            output_name="agent.exe"
          fi
          
          echo "Building for $os/$arch..."
          GOEXPERIMENT=jsonv2 CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build -a -installsuffix cgo \
            -ldflags "-X github.com/thand-io/agent/internal/common.Version=$VERSION -X github.com/thand-io/agent/internal/common.GitCommit=$COMMIT" \
            -o "dist/$output_name" .
          
          # Create archive
          if [ "$os" = "windows" ]; then
            cd dist && zip "agent-${os}-${arch}.zip" "$output_name" && cd ..
          else
            cd dist && tar -czf "agent-${os}-${arch}.tar.gz" "$output_name" && cd ..
          fi
          
          # Also keep the binary for direct download
          mv "dist/$output_name" "dist/agent-${os}-${arch}$([ "$os" = "windows" ] && echo ".exe" || echo "")"
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ steps.version.outputs.version }}
        path: dist/

  docker-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-multi-platform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-${{ steps.version.outputs.version }}
        path: dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for release
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=dev
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

    - name: Build and push Docker image (dev + latest + version tags)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.cicd
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT=${{ steps.version.outputs.commit }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build-multi-platform, docker-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-${{ steps.version.outputs.version }}
        path: dist/
